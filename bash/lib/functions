 function startTime() {
        TIMERAW=""
        export TIMESTART=`date +%s`
}

function stopTime() {
       	TIMEEND=`date +%s`
	num=`echo "$TIMEEND - $TIMESTART" | bc`
	export num=$num
        }


function startTimeScript() {
        export STIMESTART=`date +%s`
}

function stopTimeScript() {
       	STIMEEND=`date +%s`
	num=`echo "$STIMEEND - $STIMESTART" | bc`
	export num=$num

        }

function populate() {
	MMS=`seq -w 000 $mms | tail -n 1 2> /dev/null `
	DAY=`seq -w 00 $day | tail -n 1 2> /dev/null `
	HOUR=`seq -w 00 $hour | tail -n 1 2> /dev/null `
	MIN=`seq -w 00 $min | tail -n 1 2> /dev/null `
	SEC=`seq -w 00 $sec | tail -n 1 2> /dev/null `
}


function processArray() {
		num=$num
		if((num>59));then
			((sec=$num%60))
			((num=$num/60))
			if((num>59));then
				((min=$num%60))
				((num=$num/60))
				if((num>23));then
					((hour=$num%24))
					((day=$num/24))
				else
					((hour=$num))
				fi
			else
				((min=$num))
			fi
		else
			((sec=num))
		fi
}

function decodeVarsClear() {
		num=";  sec="; hour="; min="; day="; mms=";
}


function decodeMsec() {
	mms=0
	sec=0
	min=0
	hour=0
	day=0
	if((num>1000)); then
		((mms=$num%1000))
		((num=$num/1000))
			processArray
	else
		((mms=num))
	fi
	populate
	export PASS="$DAY:$HOUR:$MIN:$SEC:$MMS"

}


function decodeSec() {
		sec=0
		min=0
		hour=0
		day=0
		num=$num
		processArray
		populate
		export PASS="$DAY:$HOUR:$MIN:$SEC"
}

function checkTime() {
	decodeVarsClear
	stopTime
	decodeSec
	TIMED=$PASS
	_comment=$b_purple$TIMED$reset
	_send="`_warn`"
	_FY
}

function doneTime() {
	decodeVarsClear
	stopTime
	decodeSec
	TIMED=$PASS
	logger "`basename $0` | $TIMED"
	exit 0
}

function tellTimeM() {
	decodeVarsClear
	decodeMsec
	export	TIMED=$PASS
	echo $TIMED

}

function tellTime() {
	decodeVarsClear
	decodeSec
	export	TIMED=$PASS
	echo $TIMED

}

function tellTimeScript() {
	decodeVarsClear
	stopTimeScript
	decodeSec
	export STIMED=$PASS
}

function openshengine() {
        echo "Initializing SSH agent..."
        chmod 700 -R ~/.ssh;
        echo "privizating ~/.ssh : done";
        if [[ -f "/home/users/$USER/.ssh/authorized_keys" ]]; then
                chmod 640 /home/users/$USER/.ssh/authorized_keys
        fi
        ssh-agent; 2> /dev/null < /dev/null
        eval $( ssh-agent -s ) > ~/.ssh/environment;
        find -L "/home/users/$USER/.ssh" -type f -name 'id_*' ! -name '*.pub' -exec ssh-add {} \;
}

function cd() {
builtin cd "$@";
	RET="$?";
	ls
	return "$RET";
}





function loadSudo() {
        if [[ "$EUID" != 0 ]]; then export SUDO="sudo"; fi
}

function doFlush() {
	export  _send=""
	export  _comment=""
}

function doVarLoad() {
	 export _send=$_send
	 export _comment=$_comment
}

function Go_ok() {
	echo -e "$reset$b_green$CHR346$reset"
}
function Go_no() {
	echo -e "$reset$b_red$CHR146$reset"
}


function Go_warn() {
	echo -e "$reset$b_yellow$CHR182$reset"
}


function Go_info() {
	echo -e "$reset$b_blue$CHR152$reset"
}


function Go_stat() {
	echo -e "$reset[$b_teal$CHR47$reset"
}

function _ok() {
	echo -e -n "$reset$b_green$CHR346$reset"
}
function _no() {
	# if [[ $_send ==  ]]; then
	echo -e -n "$reset$b_red$CHR146$reset"
	# else
	# echo -e $reset$b_red$CHR146$reset
	# fi

}

function _warn() {
	# if [[ "$_send" == " ]]; then
	echo -e -n "$reset$b_yellow$CHR182$reset"
	# else
	# echo -e "$reset$b_yellow$CHR182$reset"
	# fi
}


function _info() {
	# if [[ "$_send" = " ]]; then
	echo -e -n "$reset$b_blue$CHR152$reset"
	# else
	# echo -e "$reset$b_blue$CHR152$reset
	# fi
}


function _stat() {
	echo -e -n "$reset$b_teal$CHR47$reset]"
	# echo -e $reset$b_teal$CHR47$reset
}

function _FY() {
	doVarLoad
	echo -e "[$b_yellow$_send$reset] $_comment "
	doFlush
}
function _FG() {
	doVarLoad
	echo -e "[$b_green$_send$reset] $_comment "
	doFlush
}

function _FR() {
	doVarLoad
	echo -e "[$b_red$_send$reset] $_comment "
	doFlush
}

_FP() {
	doVarLoad
	echo -e "[$b_purple$_send$reset] $_comment "
	doFlush
}

_FB() {
	doVarLoad
	echo -e "[$b_blue$_send$reset] $_comment "
	doFlush
}

_FT() {
	doVarLoad
	echo -e "[$b_teal$_send$reset] $_comment "
	doFlush
}

_FD() {
	doVarLoad
	echo -e "[$b_gray$_send$reset] $_comment "
	doFlush
}


_checkPath() {
	echo $PATH | tr ':' '\n'
}

